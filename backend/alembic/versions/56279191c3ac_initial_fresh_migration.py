"""Initial fresh migration

Revision ID: 56279191c3ac
Revises:
Create Date: 2025-08-29 03:39:30.495859

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "56279191c3ac"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "market_data_outbox",
        sa.Column("event_id", sa.UUID(), nullable=False),
        sa.Column(
            "event_type",
            postgresql.ENUM("TRADE", "QUOTE", "DEPTH", name="market_data_event_type"),
            nullable=False,
        ),
        sa.Column("ticker", sa.String(length=50), nullable=False),
        sa.Column("payload", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("published", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("event_id"),
    )
    op.create_index(
        op.f("ix_market_data_outbox_published"), "market_data_outbox", ["published"], unique=False
    )
    op.create_table(
        "orders",
        sa.Column("order_id", sa.UUID(), nullable=False),
        sa.Column("trader_id", sa.UUID(), nullable=False),
        sa.Column("ticker", sa.String(length=50), nullable=False),
        sa.Column("side", postgresql.ENUM("BUY", "SELL", name="order_side"), nullable=False),
        sa.Column(
            "order_type",
            postgresql.ENUM("MARKET", "LIMIT", "IOC", name="order_type"),
            nullable=False,
        ),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("limit_price", sa.Integer(), nullable=True),
        sa.Column("filled_quantity", sa.Integer(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING", "PARTIAL", "FILLED", "CANCELLED", "EXPIRED", name="order_status"
            ),
            nullable=False,
        ),
        sa.Column(
            "cancel_reason",
            postgresql.ENUM(
                "USER", "EXPIRED", "IOC_UNFILLED", "INSUFFICIENT_FUNDS", name="cancel_reason"
            ),
            nullable=True,
        ),
        sa.Column("sequence", sa.Integer(), nullable=False),
        sa.Column("tif_seconds", sa.Integer(), nullable=True),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("order_id"),
    )
    op.create_index(op.f("ix_orders_created_at"), "orders", ["created_at"], unique=False)
    op.create_index(op.f("ix_orders_status"), "orders", ["status"], unique=False)
    op.create_index(op.f("ix_orders_ticker"), "orders", ["ticker"], unique=False)
    op.create_index(op.f("ix_orders_trader_id"), "orders", ["trader_id"], unique=False)
    op.create_table(
        "positions",
        sa.Column("trader_id", sa.UUID(), nullable=False),
        sa.Column("ticker", sa.String(length=50), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("avg_cost", sa.Integer(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.CheckConstraint("quantity >= 0", name="check_no_negative_positions"),
        sa.PrimaryKeyConstraint("trader_id", "ticker"),
    )
    op.create_index(op.f("ix_positions_created_at"), "positions", ["created_at"], unique=False)
    op.create_table(
        "sequence_counters",
        sa.Column("ticker", sa.String(length=50), nullable=False),
        sa.Column("last_sequence", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("ticker"),
    )
    op.create_table(
        "trader_accounts",
        sa.Column("trader_id", sa.UUID(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_admin", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("trader_id"),
    )
    op.create_index(
        op.f("ix_trader_accounts_created_at"), "trader_accounts", ["created_at"], unique=False
    )
    op.create_index(
        "uq_single_admin",
        "trader_accounts",
        ["is_admin"],
        unique=True,
        postgresql_where=sa.text("is_admin IS TRUE"),
    )
    op.create_table(
        "x_users",
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("location", sa.String(length=200), nullable=True),
        sa.Column("num_followers", sa.Integer(), nullable=True),
        sa.Column("num_following", sa.Integer(), nullable=True),
        sa.Column(
            "fetched_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("username"),
    )
    op.create_index(op.f("ix_x_users_created_at"), "x_users", ["created_at"], unique=False)
    op.create_table(
        "ai_agents",
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("trader_id", sa.UUID(), nullable=False),
        sa.Column(
            "llm_model",
            postgresql.ENUM(
                "GPT_4_O",
                "GPT_4_O_MINI",
                "GPT_5",
                "GPT_5_MINI",
                "GPT_5_NANO",
                "GPT_4_O_AZURE",
                "GPT_4_O_MINI_AZURE",
                "GPT_4_1_NANO_AZURE",
                "GPT_5_AZURE",
                "GPT_5_MINI_AZURE",
                "GPT_5_NANO_AZURE",
                "CLAUDE_3_5_SONNET",
                "CLAUDE_3_5_HAIKU",
                "GROK_BETA",
                "GROK_2",
                name="llm_model",
            ),
            nullable=False,
        ),
        sa.Column("temperature", sa.DECIMAL(precision=3, scale=2), nullable=True),
        sa.Column("personality_prompt", sa.String(length=5000), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("total_decisions", sa.Integer(), nullable=True),
        sa.Column("last_decision_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_processed_tweet_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["trader_id"],
            ["trader_accounts.trader_id"],
        ),
        sa.PrimaryKeyConstraint("agent_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_ai_agents_created_at"), "ai_agents", ["created_at"], unique=False)
    op.create_table(
        "trades",
        sa.Column("trade_id", sa.UUID(), nullable=False),
        sa.Column("buy_order_id", sa.UUID(), nullable=False),
        sa.Column("sell_order_id", sa.UUID(), nullable=False),
        sa.Column("ticker", sa.String(length=50), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("buyer_id", sa.UUID(), nullable=False),
        sa.Column("seller_id", sa.UUID(), nullable=False),
        sa.Column("taker_order_id", sa.UUID(), nullable=False),
        sa.Column("maker_order_id", sa.UUID(), nullable=False),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["buy_order_id"],
            ["orders.order_id"],
        ),
        sa.ForeignKeyConstraint(
            ["sell_order_id"],
            ["orders.order_id"],
        ),
        sa.PrimaryKeyConstraint("trade_id"),
    )
    op.create_index(op.f("ix_trades_created_at"), "trades", ["created_at"], unique=False)
    op.create_index(op.f("ix_trades_ticker"), "trades", ["ticker"], unique=False)
    op.create_table(
        "x_tweets",
        sa.Column("tweet_id", sa.String(length=100), nullable=False),
        sa.Column("author_username", sa.String(length=100), nullable=False),
        sa.Column("text", sa.String(length=5000), nullable=False),
        sa.Column("retweet_count", sa.Integer(), nullable=True),
        sa.Column("reply_count", sa.Integer(), nullable=True),
        sa.Column("like_count", sa.Integer(), nullable=True),
        sa.Column("quote_count", sa.Integer(), nullable=True),
        sa.Column("view_count", sa.BIGINT(), nullable=True),
        sa.Column("bookmark_count", sa.Integer(), nullable=True),
        sa.Column("is_reply", sa.Boolean(), nullable=True),
        sa.Column("reply_to_tweet_id", sa.String(length=100), nullable=True),
        sa.Column("conversation_id", sa.String(length=100), nullable=True),
        sa.Column("in_reply_to_username", sa.String(length=100), nullable=True),
        sa.Column("quoted_tweet_id", sa.String(length=100), nullable=True),
        sa.Column("retweeted_tweet_id", sa.String(length=100), nullable=True),
        sa.Column("entities", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("tweet_created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "fetched_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["author_username"],
            ["x_users.username"],
        ),
        sa.PrimaryKeyConstraint("tweet_id"),
    )
    op.create_index(op.f("ix_x_tweets_created_at"), "x_tweets", ["created_at"], unique=False)
    op.create_table(
        "agent_memory",
        sa.Column("memory_id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column(
            "memory_type",
            postgresql.ENUM("WORKING", "COMPRESSED", "INSIGHTS", name="agent_memory_type"),
            nullable=False,
        ),
        sa.Column("content", sa.String(length=10000), nullable=False),
        sa.Column("token_count", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["ai_agents.agent_id"],
        ),
        sa.PrimaryKeyConstraint("memory_id"),
    )
    op.create_index(
        op.f("ix_agent_memory_created_at"), "agent_memory", ["created_at"], unique=False
    )
    op.create_table(
        "agent_thoughts",
        sa.Column("thought_id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("step_number", sa.Integer(), nullable=False),
        sa.Column(
            "thought_type",
            postgresql.ENUM("THINKING", "TOOL_CALL", "ERROR", name="agent_thought_type"),
            nullable=False,
        ),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column(
            "tool_name",
            postgresql.ENUM(
                "REST",
                "BUY_LIMIT",
                "SELL_LIMIT",
                "CANCEL_ORDER",
                "CHECK_ORDER_STATUS",
                "CHECK_PORTFOLIO",
                "CHECK_ORDER_BOOK",
                "CHECK_PRICE",
                "CHECK_ALL_PRICES",
                "CHECK_RECENT_TRADES",
                "LIST_TICKERS",
                "GET_X_USER_INFO",
                "GET_X_USER_TWEETS",
                "GET_X_TWEETS_BY_IDS",
                "GET_ALL_X_USERS",
                "GET_X_RECENT_TWEETS",
                name="agent_tool_name",
            ),
            nullable=True,
        ),
        sa.Column("tool_args", sa.String(), nullable=True),
        sa.Column("tool_result", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["ai_agents.agent_id"],
        ),
        sa.PrimaryKeyConstraint("thought_id"),
    )
    op.create_index(
        op.f("ix_agent_thoughts_created_at"), "agent_thoughts", ["created_at"], unique=False
    )
    op.create_table(
        "ledger_entries",
        sa.Column("entry_id", sa.UUID(), nullable=False),
        sa.Column("trade_id", sa.UUID(), nullable=True),
        sa.Column("trader_id", sa.UUID(), nullable=False),
        sa.Column("account", sa.String(length=100), nullable=False),
        sa.Column("debit_in_cents", sa.BIGINT(), nullable=True),
        sa.Column("credit_in_cents", sa.BIGINT(), nullable=True),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["trade_id"],
            ["trades.trade_id"],
        ),
        sa.PrimaryKeyConstraint("entry_id"),
    )
    op.create_index(op.f("ix_ledger_entries_account"), "ledger_entries", ["account"], unique=False)
    op.create_index(
        op.f("ix_ledger_entries_created_at"), "ledger_entries", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_ledger_entries_trader_id"), "ledger_entries", ["trader_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_ledger_entries_trader_id"), table_name="ledger_entries")
    op.drop_index(op.f("ix_ledger_entries_created_at"), table_name="ledger_entries")
    op.drop_index(op.f("ix_ledger_entries_account"), table_name="ledger_entries")
    op.drop_table("ledger_entries")
    op.drop_index(op.f("ix_agent_thoughts_created_at"), table_name="agent_thoughts")
    op.drop_table("agent_thoughts")
    op.drop_index(op.f("ix_agent_memory_created_at"), table_name="agent_memory")
    op.drop_table("agent_memory")
    op.drop_index(op.f("ix_x_tweets_created_at"), table_name="x_tweets")
    op.drop_table("x_tweets")
    op.drop_index(op.f("ix_trades_ticker"), table_name="trades")
    op.drop_index(op.f("ix_trades_created_at"), table_name="trades")
    op.drop_table("trades")
    op.drop_index(op.f("ix_ai_agents_created_at"), table_name="ai_agents")
    op.drop_table("ai_agents")
    op.drop_index(op.f("ix_x_users_created_at"), table_name="x_users")
    op.drop_table("x_users")
    op.drop_index(
        "uq_single_admin",
        table_name="trader_accounts",
        postgresql_where=sa.text("is_admin IS TRUE"),
    )
    op.drop_index(op.f("ix_trader_accounts_created_at"), table_name="trader_accounts")
    op.drop_table("trader_accounts")
    op.drop_table("sequence_counters")
    op.drop_index(op.f("ix_positions_created_at"), table_name="positions")
    op.drop_table("positions")
    op.drop_index(op.f("ix_orders_trader_id"), table_name="orders")
    op.drop_index(op.f("ix_orders_ticker"), table_name="orders")
    op.drop_index(op.f("ix_orders_status"), table_name="orders")
    op.drop_index(op.f("ix_orders_created_at"), table_name="orders")
    op.drop_table("orders")
    op.drop_index(op.f("ix_market_data_outbox_published"), table_name="market_data_outbox")
    op.drop_table("market_data_outbox")
    # ### end Alembic commands ###
