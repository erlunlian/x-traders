"""Remove AgentDecision model and update AgentThought

Revision ID: 0a77ed08a61c
Revises: fbf1fb97ab3f
Create Date: 2025-08-28 23:52:29.336931

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0a77ed08a61c"
down_revision: Union[str, Sequence[str], None] = "fbf1fb97ab3f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # First, drop the foreign key constraint that references agent_decisions
    op.drop_constraint(
        op.f("agent_thoughts_decision_id_fkey"), "agent_thoughts", type_="foreignkey"
    )
    op.drop_column("agent_thoughts", "decision_id")

    # Now we can safely drop the agent_decisions table
    op.drop_index(op.f("ix_agent_decisions_created_at"), table_name="agent_decisions")
    op.drop_index(op.f("ix_agent_decisions_ticker"), table_name="agent_decisions")
    op.drop_table("agent_decisions")

    # Update AgentThoughtType enum to add new values
    op.execute("ALTER TYPE agent_thought_type ADD VALUE IF NOT EXISTS 'TOOL_CALL'")
    op.execute("ALTER TYPE agent_thought_type ADD VALUE IF NOT EXISTS 'ERROR'")

    # Add new tool_name column to agent_thoughts
    # Create the enum type for tool names
    op.execute(
        "CREATE TYPE agent_tool_name AS ENUM ('REST', 'BUY_LIMIT', 'SELL_LIMIT', 'CANCEL_ORDER', 'CHECK_ORDER_STATUS', 'CHECK_PORTFOLIO', 'CHECK_ORDER_BOOK', 'CHECK_PRICE', 'CHECK_ALL_PRICES', 'CHECK_RECENT_TRADES', 'LIST_TICKERS', 'GET_X_USER_INFO', 'GET_X_USER_TWEETS', 'GET_X_TWEETS_BY_IDS', 'GET_ALL_X_USERS', 'GET_X_RECENT_TWEETS')"
    )
    op.add_column(
        "agent_thoughts",
        sa.Column(
            "tool_name",
            sa.Enum(
                "REST",
                "BUY_LIMIT",
                "SELL_LIMIT",
                "CANCEL_ORDER",
                "CHECK_ORDER_STATUS",
                "CHECK_PORTFOLIO",
                "CHECK_ORDER_BOOK",
                "CHECK_PRICE",
                "CHECK_ALL_PRICES",
                "CHECK_RECENT_TRADES",
                "LIST_TICKERS",
                "GET_X_USER_INFO",
                "GET_X_USER_TWEETS",
                "GET_X_TWEETS_BY_IDS",
                "GET_ALL_X_USERS",
                "GET_X_RECENT_TWEETS",
                name="agent_tool_name",
                native_enum=True,
            ),
            nullable=True,
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "agent_thoughts", sa.Column("decision_id", sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_foreign_key(
        op.f("agent_thoughts_decision_id_fkey"),
        "agent_thoughts",
        "agent_decisions",
        ["decision_id"],
        ["decision_id"],
    )
    op.drop_column("agent_thoughts", "tool_name")
    op.create_table(
        "agent_decisions",
        sa.Column("decision_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("agent_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "trigger_type",
            postgresql.ENUM(
                "TWEET", "AUTONOMOUS", "SCHEDULED", "MARKET_EVENT", name="agent_decision_trigger"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("trigger_tweet_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "action",
            postgresql.ENUM(
                "BUY",
                "SELL",
                "HOLD",
                "RESEARCH",
                "REST",
                "CONTEMPLATE",
                "CHECK_MARKET",
                "ANALYZE_TWEETS",
                name="agent_action",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("ticker", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("reasoning", sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
        sa.Column("order_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("executed", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"], ["ai_agents.agent_id"], name=op.f("agent_decisions_agent_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["order_id"], ["orders.order_id"], name=op.f("agent_decisions_order_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["trigger_tweet_id"],
            ["x_tweets.tweet_id"],
            name=op.f("agent_decisions_trigger_tweet_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("decision_id", name=op.f("agent_decisions_pkey")),
    )
    op.create_index(op.f("ix_agent_decisions_ticker"), "agent_decisions", ["ticker"], unique=False)
    op.create_index(
        op.f("ix_agent_decisions_created_at"), "agent_decisions", ["created_at"], unique=False
    )
    # ### end Alembic commands ###
