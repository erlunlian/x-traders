"""Initial migration with all tables and enums

Revision ID: c4e871b88049
Revises: 
Create Date: 2025-08-24 02:07:13.673614

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c4e871b88049'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('market_data_outbox',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('event_type', postgresql.ENUM('TRADE', 'QUOTE', 'DEPTH', name='market_data_event_type'), nullable=False),
    sa.Column('ticker', sa.String(length=50), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('published', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index(op.f('ix_market_data_outbox_created_at'), 'market_data_outbox', ['created_at'], unique=False)
    op.create_index(op.f('ix_market_data_outbox_published'), 'market_data_outbox', ['published'], unique=False)
    op.create_table('orders',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('trader_id', sa.UUID(), nullable=False),
    sa.Column('ticker', sa.String(length=50), nullable=False),
    sa.Column('side', postgresql.ENUM('BUY', 'SELL', name='order_side'), nullable=False),
    sa.Column('order_type', postgresql.ENUM('MARKET', 'LIMIT', 'IOC', name='order_type'), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('limit_price', sa.Integer(), nullable=True),
    sa.Column('filled_quantity', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'PARTIAL', 'FILLED', 'CANCELLED', 'EXPIRED', name='order_status'), nullable=False),
    sa.Column('cancel_reason', postgresql.ENUM('USER', 'EXPIRED', 'IOC_UNFILLED', 'INSUFFICIENT_FUNDS', name='cancel_reason'), nullable=True),
    sa.Column('sequence', sa.BIGINT(), nullable=False),
    sa.Column('tif_seconds', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('filled_quantity <= quantity', name='check_filled_le_quantity'),
    sa.CheckConstraint('filled_quantity >= 0', name='check_filled_non_negative'),
    sa.CheckConstraint('limit_price IS NULL OR limit_price > 0', name='check_limit_price_positive'),
    sa.CheckConstraint('quantity > 0', name='check_quantity_positive'),
    sa.CheckConstraint('tif_seconds > 0', name='check_tif_positive'),
    sa.PrimaryKeyConstraint('order_id')
    )
    op.create_index(op.f('ix_orders_created_at'), 'orders', ['created_at'], unique=False)
    op.create_index('ix_orders_expires_status', 'orders', ['expires_at', 'status'], unique=False)
    op.create_index(op.f('ix_orders_status'), 'orders', ['status'], unique=False)
    op.create_index(op.f('ix_orders_ticker'), 'orders', ['ticker'], unique=False)
    op.create_index('ix_orders_ticker_status_side', 'orders', ['ticker', 'status', 'side'], unique=False)
    op.create_index(op.f('ix_orders_trader_id'), 'orders', ['trader_id'], unique=False)
    op.create_table('positions',
    sa.Column('trader_id', sa.UUID(), nullable=False),
    sa.Column('ticker', sa.String(length=50), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('avg_cost', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('quantity >= 0', name='check_no_negative_positions'),
    sa.PrimaryKeyConstraint('trader_id', 'ticker')
    )
    op.create_index(op.f('ix_positions_created_at'), 'positions', ['created_at'], unique=False)
    op.create_table('sequence_counters',
    sa.Column('ticker', sa.String(length=50), nullable=False),
    sa.Column('last_sequence', sa.BIGINT(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('ticker')
    )
    op.create_index(op.f('ix_sequence_counters_created_at'), 'sequence_counters', ['created_at'], unique=False)
    op.create_table('trader_accounts',
    sa.Column('trader_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('trader_id')
    )
    op.create_index(op.f('ix_trader_accounts_created_at'), 'trader_accounts', ['created_at'], unique=False)
    op.create_table('trades',
    sa.Column('trade_id', sa.UUID(), nullable=False),
    sa.Column('buy_order_id', sa.UUID(), nullable=True),
    sa.Column('sell_order_id', sa.UUID(), nullable=True),
    sa.Column('ticker', sa.String(length=50), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('buyer_id', sa.UUID(), nullable=False),
    sa.Column('seller_id', sa.UUID(), nullable=False),
    sa.Column('taker_order_id', sa.UUID(), nullable=False),
    sa.Column('maker_order_id', sa.UUID(), nullable=False),
    sa.Column('executed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('price > 0', name='check_trade_price_positive'),
    sa.CheckConstraint('quantity > 0', name='check_trade_quantity_positive'),
    sa.ForeignKeyConstraint(['buy_order_id'], ['orders.order_id'], ),
    sa.ForeignKeyConstraint(['sell_order_id'], ['orders.order_id'], ),
    sa.PrimaryKeyConstraint('trade_id')
    )
    op.create_index(op.f('ix_trades_created_at'), 'trades', ['created_at'], unique=False)
    op.create_index(op.f('ix_trades_executed_at'), 'trades', ['executed_at'], unique=False)
    op.create_index(op.f('ix_trades_ticker'), 'trades', ['ticker'], unique=False)
    op.create_index('ix_trades_ticker_time', 'trades', ['ticker', 'executed_at'], unique=False)
    op.create_table('ledger_entries',
    sa.Column('entry_id', sa.UUID(), nullable=False),
    sa.Column('trade_id', sa.UUID(), nullable=True),
    sa.Column('trader_id', sa.UUID(), nullable=False),
    sa.Column('account', sa.String(length=50), nullable=False),
    sa.Column('debit_in_cents', sa.Integer(), nullable=True),
    sa.Column('credit_in_cents', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(debit_in_cents = 0 AND credit_in_cents > 0) OR (debit_in_cents > 0 AND credit_in_cents = 0)', name='check_debit_credit_exclusive'),
    sa.ForeignKeyConstraint(['trade_id'], ['trades.trade_id'], ),
    sa.PrimaryKeyConstraint('entry_id')
    )
    op.create_index(op.f('ix_ledger_entries_created_at'), 'ledger_entries', ['created_at'], unique=False)
    op.create_index(op.f('ix_ledger_entries_trader_id'), 'ledger_entries', ['trader_id'], unique=False)
    op.create_index('ix_ledger_trader_account_time', 'ledger_entries', ['trader_id', 'account', 'created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_ledger_trader_account_time', table_name='ledger_entries')
    op.drop_index(op.f('ix_ledger_entries_trader_id'), table_name='ledger_entries')
    op.drop_index(op.f('ix_ledger_entries_created_at'), table_name='ledger_entries')
    op.drop_table('ledger_entries')
    op.drop_index('ix_trades_ticker_time', table_name='trades')
    op.drop_index(op.f('ix_trades_ticker'), table_name='trades')
    op.drop_index(op.f('ix_trades_executed_at'), table_name='trades')
    op.drop_index(op.f('ix_trades_created_at'), table_name='trades')
    op.drop_table('trades')
    op.drop_index(op.f('ix_trader_accounts_created_at'), table_name='trader_accounts')
    op.drop_table('trader_accounts')
    op.drop_index(op.f('ix_sequence_counters_created_at'), table_name='sequence_counters')
    op.drop_table('sequence_counters')
    op.drop_index(op.f('ix_positions_created_at'), table_name='positions')
    op.drop_table('positions')
    op.drop_index(op.f('ix_orders_trader_id'), table_name='orders')
    op.drop_index('ix_orders_ticker_status_side', table_name='orders')
    op.drop_index(op.f('ix_orders_ticker'), table_name='orders')
    op.drop_index(op.f('ix_orders_status'), table_name='orders')
    op.drop_index('ix_orders_expires_status', table_name='orders')
    op.drop_index(op.f('ix_orders_created_at'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_market_data_outbox_published'), table_name='market_data_outbox')
    op.drop_index(op.f('ix_market_data_outbox_created_at'), table_name='market_data_outbox')
    op.drop_table('market_data_outbox')
    # ### end Alembic commands ###
