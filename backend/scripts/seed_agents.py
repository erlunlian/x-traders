"""Seed multiple AI agents with random personalities and initial balances.

Creates N agents, each with:
- Unique name
- Personality prompt generated by Azure OpenAI GPT-5 Nano (if configured),
  otherwise a local randomized fallback
- Initial cash balance of $500
- is_active=True so they start active upon creation

Usage:
  uv run python backend/scripts/seed_agents.py --count 100
  # or
  python -m backend.scripts.seed_agents --count 100

Environment:
- Requires DATABASE_URL to be set
- For Azure OpenAI personality generation, set AZURE_OPENAI_API_KEY and
  AZURE_OPENAI_ENDPOINT (model/version resolved via enums)
"""

import argparse
import asyncio
import json
import os
import random
import re
from typing import Optional, Tuple

from sqlmodel import func, select

from database import get_db_transaction
from database.models import AIAgent
from database.repositories import AgentRepository, LedgerRepository, TraderRepository
from enums import LLMModel

# Optional: Use LangChain-based LLM factory if Azure credentials are present
_HAS_AZURE_ENV = bool(os.getenv("AZURE_OPENAI_API_KEY") and os.getenv("AZURE_OPENAI_ENDPOINT"))

if _HAS_AZURE_ENV:
    try:
        from langchain_core.messages import HumanMessage, SystemMessage

        from services.agents.utils import create_llm
    except Exception:
        _HAS_AZURE_ENV = False


INITIAL_BALANCE_CENTS = 20000 * 100  # $20,000
DEFAULT_COUNT = 10


def _slugify(text: str) -> str:
    """Create a URL/DB-friendly slug from a string."""
    text = text.strip().lower()
    text = re.sub(r"[^a-z0-9\-\s]", "", text)
    text = re.sub(r"\s+", "-", text)
    text = re.sub(r"-+", "-", text)
    return text.strip("-")


def _fallback_personality_prompt(name: str) -> str:
    """Generate a deterministic but varied fallback personality prompt for X profile trading."""
    risk_styles = [
        "ultra-conservative",
        "conservative",
        "balanced",
        "growth-oriented",
        "opportunistic",
        "aggressive",
    ]
    focuses = [
        "hype momentum on X",
        "engagement velocity tracking",
        "influencer amplification signals",
        "narrative trend riding",
        "sentiment swing trades",
        "thread recency scalps",
        "meme propagation plays",
    ]
    cohorts = [
        "AI builders",
        "crypto degens",
        "tech influencers",
        "founders",
        "politics",
        "research analysts",
        "memetic accounts",
    ]
    tones = [
        "calm and analytical",
        "decisive and bold",
        "curious and contrarian",
        "patient and methodical",
        "pragmatic and risk-aware",
        "data-obsessed and systematic",
    ]
    social_levels = [
        "lurker",
        "balanced",
        "highly active",
    ]
    social_behaviors = [
        "quietly consumes the internal agent feed for specific tickers and reacts to sentiment shifts",
        "reads and occasionally posts concise takes on ticker narratives to test market response",
        "actively posts to shape short-term sentiment and amplify momentum on selected tickers",
    ]

    random.seed(name)  # keep fallback stable for a given name
    style = random.choice(risk_styles)
    focus = random.choice(focuses)
    cohort = random.choice(cohorts)
    tone = random.choice(tones)
    social_level = random.choice(social_levels)
    social_behavior = random.choice(social_behaviors)
    return (
        f"You are {name}, a {tone} agent trading tokens tied to X user profiles. "
        f"Risk: {style} with disciplined sizing and cool-downs after spikes. Edge: {focus}. "
        f"Specialty cohort: {cohort}. Read tweet timelines, the internal agent feed, engagement "
        f"velocity, sentiment, and influencer amplification to time entries and exits. Social "
        f"activity: {social_level}; {social_behavior}. Avoid equity fundamentals."
    )


async def _generate_personality_with_azure(name: str) -> Optional[str]:
    """Generate a personality prompt using Azure OpenAI via LangChain if configured.

    Returns None if generation fails for any reason.
    """
    if not _HAS_AZURE_ENV:
        return None

    try:
        llm = create_llm(LLMModel.GPT_5_NANO_AZURE, temperature=0.7)
        system = SystemMessage(
            content=(
                "You craft short personality prompts for agents that trade tokens tied to X user"
                " profiles, not stocks. Keep it 2-5 sentences, under 500 characters. Include:"
                " risk appetite, decision style (reactive to tweets vs scheduled scans), preferred"
                " signals (engagement velocity, sentiment, influencer amplification, thread recency),"
                " and target cohorts (e.g., AI builders, crypto Twitter). Mention simple risk controls"
                " (position sizing, stop-outs, cool-down after hype spikes). Also specify the agent's"
                " typical social activity level (e.g., lurker, balanced, highly active) and how they"
                " use the internal agent feed to read/post about specific tickers, including whether"
                " they tend to consume information, coordinate sentiment, or attempt to influence"
                " momentum. No code or backticks."
            )
        )
        human = HumanMessage(
            content=(
                f"Agent name: {name}. Write a concise, practical personality prompt tailored to"
                " trading X profile tokens driven by hype and tweets. Avoid equity jargon."
            )
        )
        ai_msg = await llm.ainvoke([system, human])
        text = (ai_msg.content or "").strip()
        if not text:
            return None
        if len(text) > 5000:
            text = text[:5000]
        return text
    except Exception:
        return None


async def _generate_name_and_personality_with_azure(index: int) -> Optional[Tuple[str, str]]:
    """Generate both a human-readable agent name and personality using Azure OpenAI.

    Returns (name, personality) or None if anything fails.
    """
    if not _HAS_AZURE_ENV:
        return None

    try:
        llm = create_llm(LLMModel.GPT_5_NANO_AZURE, temperature=0.7)
        system = SystemMessage(
            content=(
                "You generate JSON only. Create a concise, human-readable agent name and a short "
                "personality prompt for an agent that trades tokens tied to X user profiles. "
                "Keep the personality 2-5 sentences, under 500 characters. Include: risk appetite, "
                "decision style (reactive to tweets vs scheduled scans), preferred signals "
                "(engagement velocity, sentiment, influencer amplification, thread recency), target "
                "cohorts (e.g., AI builders, crypto Twitter), and simple risk controls. Also specify "
                "the agent's social activity level (lurker/balanced/highly active) and how they read "
                "and/or post on the internal agent feed for specific tickers, including whether they "
                "tend to consume information or attempt to influence momentum. No code, no backticks. "
                "Output valid JSON with keys: name, personality."
            )
        )
        human = HumanMessage(
            content=(f"Seed index: {index}. Propose a catchy agent name, avoiding offensive terms.")
        )
        ai_msg = await llm.ainvoke([system, human])
        text = (ai_msg.content or "").strip()
        if not text:
            return None

        candidate = text
        # If the model wraps JSON in code fences, strip them
        if candidate.startswith("```"):
            candidate = candidate.strip("`\n ")
            if candidate.startswith("json"):
                candidate = candidate[4:].strip()
        data = json.loads(candidate)
        name_value = str(data.get("name", "")).strip()
        personality_value = str(data.get("personality", "")).strip()
        if not name_value or not personality_value:
            return None
        if len(personality_value) > 5000:
            personality_value = personality_value[:5000]
        return name_value, personality_value
    except Exception:
        return None


def _random_agent_name(index: int) -> str:
    """Generate a unique, human-readable agent name."""
    adjectives = [
        "Swift",
        "Clever",
        "Steady",
        "Bold",
        "Calm",
        "Vigilant",
        "Nimble",
        "Astute",
        "Curious",
        "Resolute",
    ]
    animals = [
        "Falcon",
        "Fox",
        "Panther",
        "Hawk",
        "Wolf",
        "Otter",
        "Badger",
        "Lynx",
        "Raven",
        "Orca",
    ]
    adjective = adjectives[index % len(adjectives)]
    animal = animals[index % len(animals)]
    suffix = random.randint(1000, 9999)
    return f"{adjective}{animal}-{suffix}"


async def create_one_agent(name: str, index: int) -> None:
    """Create a single agent with a fixed name and generated personality and initial cash in one transaction."""
    # Always use provided name; only generate personality
    personality = await _generate_personality_with_azure(name)
    if not personality:
        personality = _fallback_personality_prompt(name)

    # Create trader, fund cash, and create agent atomically
    async with get_db_transaction() as session:
        trader_repo = TraderRepository(session)
        ledger_repo = LedgerRepository(session)
        agent_repo = AgentRepository(session)

        # Ensure unique name if collision
        existing = await agent_repo.get_agent_by_name_or_none(name)
        if existing:
            # Append slug and index for uniqueness
            name = f"{name}-{_slugify(existing.agent_id.hex[:6])}"

        trader = await trader_repo.create_trader_in_transaction_without_commit(is_admin=False)
        await ledger_repo.initialize_trader_cash_without_commit(
            trader_id=trader.trader_id,
            initial_cash_in_cents=INITIAL_BALANCE_CENTS,
        )

        # Set agents active so they can start immediately after creation
        await agent_repo.create_agent_without_commit(
            name=name,
            trader_id=trader.trader_id,
            llm_model=LLMModel.GPT_5_NANO_AZURE,
            personality_prompt=personality,
            temperature=0.7,
            is_active=True,
        )

        # Commit transaction
        # get_db_transaction handles session.begin() context; exiting commits


async def _get_existing_agent_count() -> int:
    """Return the current number of agents in the database."""
    async with get_db_transaction() as session:
        result = await session.execute(select(func.count(AIAgent.agent_id)))
        return int(result.scalar() or 0)


async def main(count: int) -> None:
    existing_count = await _get_existing_agent_count()
    start_index = existing_count + 1
    print(f"Seeding {count} agents with $10,000 each starting at agent_{start_index}...")
    # Sequential creation for simplicity and to reduce provider rate-limit risk
    for i in range(count):
        name_index = start_index + i
        name = f"agent_{name_index}"
        await create_one_agent(name, i)
        if (i + 1) % 10 == 0:
            print(f"  Created {i + 1}/{count} agents...")
    print("Done.")


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Seed AI agents with personalities and balances")
    parser.add_argument(
        "--count", type=int, default=DEFAULT_COUNT, help="Number of agents to create"
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    asyncio.run(main(args.count))
